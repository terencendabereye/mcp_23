$date
	Wed May 10 20:27:31 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu_tb $end
$var wire 1 ! zer $end
$var wire 1 " ovf $end
$var wire 1 # neg $end
$var wire 32 $ c [31:0] $end
$var reg 32 % a [31:0] $end
$var reg 32 & b [31:0] $end
$var reg 8 ' op [7:0] $end
$var integer 32 ( i [31:0] $end
$var integer 32 ) j [31:0] $end
$var integer 32 * k [31:0] $end
$scope module A1 $end
$var wire 8 + operation [7:0] $end
$var wire 32 , x [31:0] $end
$var wire 32 - y [31:0] $end
$var reg 32 . ans [31:0] $end
$var reg 1 " did_overflow $end
$var reg 1 # is_negative $end
$var reg 1 ! is_zero $end
$upscope $end
$upscope $end
$scope module control_unit_tb $end
$var wire 16 / operand [15:0] $end
$var wire 16 0 reg_ans [15:0] $end
$var wire 16 1 reg_b [15:0] $end
$var wire 4 2 reg_addr_to [3:0] $end
$var wire 4 3 reg_addr_from [3:0] $end
$var wire 16 4 reg_a [15:0] $end
$var wire 1 5 mov_enable $end
$var wire 1 6 mem_write $end
$var wire 1 7 mem_enable $end
$var wire 16 8 mem_data [15:0] $end
$var wire 16 9 mem_addr [15:0] $end
$var wire 1 : clk $end
$scope module A1 $end
$var wire 16 ; operation [15:0] $end
$var wire 16 < y [15:0] $end
$var wire 16 = x [15:0] $end
$var reg 16 > ans [15:0] $end
$var reg 1 ? did_overflow $end
$var reg 1 @ is_negative $end
$var reg 1 A is_zero $end
$upscope $end
$scope module C1 $end
$var reg 1 : clk $end
$upscope $end
$scope module CU1 $end
$var wire 1 : clk $end
$var wire 16 B mem_data [15:0] $end
$var reg 16 C mem_addr [15:0] $end
$var reg 1 7 mem_enable $end
$var reg 1 6 mem_write $end
$var reg 1 5 mov_enable $end
$var reg 16 D operand [15:0] $end
$var reg 4 E reg_addr_from [3:0] $end
$var reg 4 F reg_addr_to [3:0] $end
$var integer 32 G state [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 H i [31:0] $end
$upscope $end
$upscope $end
$scope module M1 $end
$var wire 16 I addr [15:0] $end
$var wire 1 7 enable $end
$var wire 1 6 write $end
$var wire 16 J data [15:0] $end
$scope begin $ivl_for_loop2 $end
$var integer 32 K i [31:0] $end
$upscope $end
$upscope $end
$scope module RB1 $end
$var wire 16 L alu_ans [15:0] $end
$var wire 16 M alu_x [15:0] $end
$var wire 16 N alu_y [15:0] $end
$var wire 1 : clk $end
$var wire 1 5 enable $end
$var wire 4 O from_addr [3:0] $end
$var wire 16 P input_reg [15:0] $end
$var wire 4 Q to_addr [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 R i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg_bank_tb $end
$var wire 16 S alu_ans [15:0] $end
$var wire 1 T clk $end
$var wire 16 U alu_y [15:0] $end
$var wire 16 V alu_x [15:0] $end
$var reg 1 W enable $end
$var reg 4 X from_addr [3:0] $end
$var reg 16 Y input_reg [15:0] $end
$var reg 4 Z to_addr [3:0] $end
$scope module A1 $end
$var wire 16 [ operation [15:0] $end
$var wire 16 \ y [15:0] $end
$var wire 16 ] x [15:0] $end
$var reg 16 ^ ans [15:0] $end
$var reg 1 _ did_overflow $end
$var reg 1 ` is_negative $end
$var reg 1 a is_zero $end
$upscope $end
$scope module C1 $end
$var reg 1 T clk $end
$upscope $end
$scope module RB1 $end
$var wire 16 b alu_ans [15:0] $end
$var wire 16 c alu_x [15:0] $end
$var wire 16 d alu_y [15:0] $end
$var wire 1 T clk $end
$var wire 1 W enable $end
$var wire 4 e from_addr [3:0] $end
$var wire 16 f input_reg [15:0] $end
$var wire 4 g to_addr [3:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 h i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000 h
bx g
bx f
bx e
bz d
bz c
bx b
xa
x`
x_
bx ^
bz ]
bz \
b0 [
bx Z
bx Y
bx X
xW
bz V
bz U
0T
bx S
b10000 R
bx Q
b0 P
bx O
bz N
bz M
bx L
b1100100 K
b0 J
b0 I
b100 H
b0 G
bx F
bx E
b0 D
b0 C
b0 B
xA
x@
x?
bx >
bz =
bz <
b0 ;
0:
b0 9
b0 8
17
06
05
bz 4
bx 3
bx 2
bz 1
bx 0
b0 /
b11111111111111111111111111101100 .
b11111111111111111111111111110110 -
b11111111111111111111111111110110 ,
b0 +
b0 *
b11111111111111111111111111110110 )
b11111111111111111111111111110110 (
b0 '
b11111111111111111111111111110110 &
b11111111111111111111111111110110 %
b11111111111111111111111111101100 $
1#
1"
0!
$end
#1
b1000110110 8
b1000110110 B
b1000110110 J
b1 9
b1 C
b1 I
0#
1!
0"
b0 $
b0 .
1T
1:
b1 '
b1 +
b1 *
#2
b1 V
b1 ]
b1 c
1#
0!
b11111111111111111111111111110110 $
b11111111111111111111111111110110 .
0T
0:
b10 '
b10 +
b10 *
1W
b1011 Z
b1011 g
b1010 X
b1010 e
b1 f
b1 Y
#3
b100001011 8
b100001011 B
b100001011 J
b10 9
b10 C
b10 I
15
b110 2
b110 F
b110 Q
b11 3
b11 E
b11 O
1T
1:
b11 '
b11 +
b11 *
#4
0`
0a
0_
b10 S
b10 b
b10 ^
b1 U
b1 \
b1 d
0#
1!
b0 $
b0 .
0T
0:
b100 '
b100 +
b100 *
b1100 Z
b1100 g
#5
b1 8
b1 B
b1 J
b11 9
b11 C
b11 I
b1 G
b1011 2
b1011 F
b1011 Q
b1010 3
b1010 E
b1010 O
05
1#
0!
1"
b11111111111111111111111111101101 $
b11111111111111111111111111101101 .
1T
1:
b0 '
b0 +
b11111111111111111111111111110111 &
b11111111111111111111111111110111 -
b11111111111111111111111111110111 )
b0 *
#6
b11 S
b11 b
b11 ^
b10 U
b10 \
b10 d
b11111111111111111111111111111111 $
b11111111111111111111111111111111 .
0T
0:
b1 '
b1 +
b1 *
b1101 X
b1101 e
#7
b100001100 8
b100001100 B
b100001100 J
b100 9
b100 C
b100 I
b0 G
15
b1 /
b1 ;
b1 P
b1 D
b100 S
b100 b
b100 ^
b11 U
b11 \
b11 d
b11111111111111111111111111110110 $
b11111111111111111111111111110110 .
1T
1:
b10 '
b10 +
b10 *
#8
b101 S
b101 b
b101 ^
b100 U
b100 \
b100 d
b1 4
b1 =
b1 M
b11111111111111111111111111110111 $
b11111111111111111111111111110111 .
0T
0:
b11 '
b11 +
b11 *
#9
b1 8
b1 B
b1 J
b101 9
b101 C
b101 I
b1 G
b1100 2
b1100 F
b1100 Q
b110 S
b110 b
b110 ^
b101 U
b101 \
b101 d
b0 /
b0 ;
b0 P
b0 D
05
0#
b1 $
b1 .
1T
1:
b100 '
b100 +
b100 *
#10
b111 S
b111 b
b111 ^
b110 U
b110 \
b110 d
1#
b11111111111111111111111111101110 $
b11111111111111111111111111101110 .
0T
0:
b0 '
b0 +
b11111111111111111111111111111000 &
b11111111111111111111111111111000 -
b11111111111111111111111111111000 )
b0 *
#11
b1000000001011 8
b1000000001011 B
b1000000001011 J
b110 9
b110 C
b110 I
b0 G
15
b1 /
b1 ;
b1 P
b1 D
b1000 S
b1000 b
b1000 ^
b111 U
b111 \
b111 d
b11111111111111111111111111111110 $
b11111111111111111111111111111110 .
1T
1:
b1 '
b1 +
b1 *
#12
b1001 S
b1001 b
b1001 ^
0@
1A
0?
b0 0
b0 L
b0 >
b1000 U
b1000 \
b1000 d
b1 1
b1 <
b1 N
b11111111111111111111111111110000 $
b11111111111111111111111111110000 .
0T
0:
b10 '
b10 +
b10 *
#13
b11111111 8
b11111111 B
b11111111 J
b111 9
b111 C
b111 I
b1011 2
b1011 F
b1011 Q
b1101 3
b1101 E
b1101 O
b1010 S
b1010 b
b1010 ^
0A
b10 0
b10 L
b10 >
b1001 U
b1001 \
b1001 d
b0 /
b0 ;
b0 P
b0 D
15
b11111111111111111111111111111110 $
b11111111111111111111111111111110 .
1T
1:
b11 '
b11 +
b11 *
#14
b1011 S
b1011 b
b1011 ^
b11 0
b11 L
b11 >
b1010 U
b1010 \
b1010 d
b10 4
b10 =
b10 M
0#
b1110 $
b1110 .
0T
0:
b100 '
b100 +
b100 *
#15
b1000 9
b1000 C
b1000 I
b1100 S
b1100 b
b1100 ^
b100 0
b100 L
b100 >
b1011 U
b1011 \
b1011 d
05
b11 4
b11 =
b11 M
1#
b11111111111111111111111111101111 $
b11111111111111111111111111101111 .
1T
1:
b0 '
b0 +
b11111111111111111111111111111001 &
b11111111111111111111111111111001 -
b11111111111111111111111111111001 )
b0 *
#16
b1101 S
b1101 b
b1101 ^
b1100 U
b1100 \
b1100 d
b11111111111111111111111111111101 $
b11111111111111111111111111111101 .
0T
0:
b1 '
b1 +
b1 *
#17
b1001 9
b1001 C
b1001 I
b1110 S
b1110 b
b1110 ^
b1101 U
b1101 \
b1101 d
b11111111111111111111111111110000 $
b11111111111111111111111111110000 .
1T
1:
b10 '
b10 +
b10 *
#18
b1111 S
b1111 b
b1111 ^
b1110 U
b1110 \
b1110 d
b11111111111111111111111111111111 $
b11111111111111111111111111111111 .
0T
0:
b11 '
b11 +
b11 *
#19
b1010 9
b1010 C
b1010 I
b10000 S
b10000 b
b10000 ^
b1111 U
b1111 \
b1111 d
0#
b1111 $
b1111 .
1T
1:
b100 '
b100 +
b100 *
#20
b10001 S
b10001 b
b10001 ^
b10000 U
b10000 \
b10000 d
1#
b11111111111111111111111111110000 $
b11111111111111111111111111110000 .
0T
0:
b0 '
b0 +
b11111111111111111111111111111010 &
b11111111111111111111111111111010 -
b11111111111111111111111111111010 )
b0 *
#21
b1011 9
b1011 C
b1011 I
b10010 S
b10010 b
b10010 ^
b10001 U
b10001 \
b10001 d
b11111111111111111111111111111100 $
b11111111111111111111111111111100 .
1T
1:
b1 '
b1 +
b1 *
#22
b10011 S
b10011 b
b10011 ^
b10010 U
b10010 \
b10010 d
b11111111111111111111111111110010 $
b11111111111111111111111111110010 .
0T
0:
b10 '
b10 +
b10 *
#23
b1100 9
b1100 C
b1100 I
b10100 S
b10100 b
b10100 ^
b10011 U
b10011 \
b10011 d
b11111111111111111111111111111110 $
b11111111111111111111111111111110 .
1T
1:
b11 '
b11 +
b11 *
#24
b10101 S
b10101 b
b10101 ^
b10100 U
b10100 \
b10100 d
0#
b1100 $
b1100 .
0T
0:
b100 '
b100 +
b100 *
#25
b1101 9
b1101 C
b1101 I
b10110 S
b10110 b
b10110 ^
b10101 U
b10101 \
b10101 d
1#
b11111111111111111111111111110001 $
b11111111111111111111111111110001 .
1T
1:
b0 '
b0 +
b11111111111111111111111111111011 &
b11111111111111111111111111111011 -
b11111111111111111111111111111011 )
b0 *
#26
b10111 S
b10111 b
b10111 ^
b10110 U
b10110 \
b10110 d
b11111111111111111111111111111011 $
b11111111111111111111111111111011 .
0T
0:
b1 '
b1 +
b1 *
#27
b1110 9
b1110 C
b1110 I
b11000 S
b11000 b
b11000 ^
b10111 U
b10111 \
b10111 d
b11111111111111111111111111110010 $
b11111111111111111111111111110010 .
1T
1:
b10 '
b10 +
b10 *
#28
b11001 S
b11001 b
b11001 ^
b11000 U
b11000 \
b11000 d
b11111111111111111111111111111111 $
b11111111111111111111111111111111 .
0T
0:
b11 '
b11 +
b11 *
#29
b1111 9
b1111 C
b1111 I
b11010 S
b11010 b
b11010 ^
b11001 U
b11001 \
b11001 d
0#
b1101 $
b1101 .
1T
1:
b100 '
b100 +
b100 *
#30
b11011 S
b11011 b
b11011 ^
b11010 U
b11010 \
b11010 d
1#
b11111111111111111111111111110010 $
b11111111111111111111111111110010 .
0T
0:
b0 '
b0 +
b11111111111111111111111111111100 &
b11111111111111111111111111111100 -
b11111111111111111111111111111100 )
b0 *
#31
bx 8
bx B
bx J
b10000 9
b10000 C
b10000 I
b11100 S
b11100 b
b11100 ^
b11011 U
b11011 \
b11011 d
b11111111111111111111111111111010 $
b11111111111111111111111111111010 .
1T
1:
b1 '
b1 +
b1 *
#32
b11101 S
b11101 b
b11101 ^
b11100 U
b11100 \
b11100 d
b11111111111111111111111111110100 $
b11111111111111111111111111110100 .
0T
0:
b10 '
b10 +
b10 *
#33
b10001 9
b10001 C
b10001 I
b11110 S
b11110 b
b11110 ^
b11101 U
b11101 \
b11101 d
b11111111111111111111111111111110 $
b11111111111111111111111111111110 .
1T
1:
b11 '
b11 +
b11 *
#34
b11111 S
b11111 b
b11111 ^
b11110 U
b11110 \
b11110 d
0#
b1010 $
b1010 .
0T
0:
b100 '
b100 +
b100 *
#35
b10010 9
b10010 C
b10010 I
b100000 S
b100000 b
b100000 ^
b11111 U
b11111 \
b11111 d
1#
b11111111111111111111111111110011 $
b11111111111111111111111111110011 .
1T
1:
b0 '
b0 +
b11111111111111111111111111111101 &
b11111111111111111111111111111101 -
b11111111111111111111111111111101 )
b0 *
#36
b100001 S
b100001 b
b100001 ^
b100000 U
b100000 \
b100000 d
b11111111111111111111111111111001 $
b11111111111111111111111111111001 .
0T
0:
b1 '
b1 +
b1 *
#37
b10011 9
b10011 C
b10011 I
b100010 S
b100010 b
b100010 ^
b100001 U
b100001 \
b100001 d
b11111111111111111111111111110100 $
b11111111111111111111111111110100 .
1T
1:
b10 '
b10 +
b10 *
#38
b100011 S
b100011 b
b100011 ^
b100010 U
b100010 \
b100010 d
b11111111111111111111111111111111 $
b11111111111111111111111111111111 .
0T
0:
b11 '
b11 +
b11 *
#39
b10100 9
b10100 C
b10100 I
b100100 S
b100100 b
b100100 ^
b100011 U
b100011 \
b100011 d
0#
b1011 $
b1011 .
1T
1:
b100 '
b100 +
b100 *
#40
b100101 S
b100101 b
b100101 ^
b100100 U
b100100 \
b100100 d
1#
b11111111111111111111111111110100 $
b11111111111111111111111111110100 .
0T
0:
b0 '
b0 +
b11111111111111111111111111111110 &
b11111111111111111111111111111110 -
b11111111111111111111111111111110 )
b0 *
#41
b10101 9
b10101 C
b10101 I
b100110 S
b100110 b
b100110 ^
b100101 U
b100101 \
b100101 d
b11111111111111111111111111111000 $
b11111111111111111111111111111000 .
1T
1:
b1 '
b1 +
b1 *
#42
b100111 S
b100111 b
b100111 ^
b100110 U
b100110 \
b100110 d
b11111111111111111111111111110110 $
b11111111111111111111111111110110 .
0T
0:
b10 '
b10 +
b10 *
#43
b10110 9
b10110 C
b10110 I
b101000 S
b101000 b
b101000 ^
b100111 U
b100111 \
b100111 d
b11111111111111111111111111111110 $
b11111111111111111111111111111110 .
1T
1:
b11 '
b11 +
b11 *
#44
b101001 S
b101001 b
b101001 ^
b101000 U
b101000 \
b101000 d
0#
b1000 $
b1000 .
0T
0:
b100 '
b100 +
b100 *
#45
b10111 9
b10111 C
b10111 I
b101010 S
b101010 b
b101010 ^
b101001 U
b101001 \
b101001 d
1#
b11111111111111111111111111110101 $
b11111111111111111111111111110101 .
1T
1:
b0 '
b0 +
b11111111111111111111111111111111 &
b11111111111111111111111111111111 -
b11111111111111111111111111111111 )
b0 *
#46
b101011 S
b101011 b
b101011 ^
b101010 U
b101010 \
b101010 d
b11111111111111111111111111110111 $
b11111111111111111111111111110111 .
0T
0:
b1 '
b1 +
b1 *
#47
b11000 9
b11000 C
b11000 I
b101100 S
b101100 b
b101100 ^
b101011 U
b101011 \
b101011 d
b11111111111111111111111111110110 $
b11111111111111111111111111110110 .
1T
1:
b10 '
b10 +
b10 *
#48
b101101 S
b101101 b
b101101 ^
b101100 U
b101100 \
b101100 d
b11111111111111111111111111111111 $
b11111111111111111111111111111111 .
0T
0:
b11 '
b11 +
b11 *
#49
b11001 9
b11001 C
b11001 I
b101110 S
b101110 b
b101110 ^
b101101 U
b101101 \
b101101 d
0#
b1001 $
b1001 .
1T
1:
b100 '
b100 +
b100 *
#50
b101111 S
b101111 b
b101111 ^
b101110 U
b101110 \
b101110 d
1#
0"
b11111111111111111111111111110110 $
b11111111111111111111111111110110 .
0T
0:
b0 '
b0 +
b0 &
b0 -
b0 )
b0 *
